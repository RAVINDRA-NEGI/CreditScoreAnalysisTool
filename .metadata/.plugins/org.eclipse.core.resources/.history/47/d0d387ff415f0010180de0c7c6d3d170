package com.user.controller;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.BadCredentialsException;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.user.constants.Constants;
import com.user.dto.ResponseDTO;
import com.user.dto.UserDTO;
import com.user.service.IUserService;
import com.user.service.impl.MyUserDetailsService;

import lombok.AllArgsConstructor;

@RestController
@RequestMapping("/api")
@AllArgsConstructor
public class UserController {
	
	private final IUserService iUserService;
	
	AuthenticationManager authenticationManager;
	
	MyUserDetailsService myUserDetailsService;
	
	@PostMapping("/userregister")
	public ResponseEntity<ResponseDTO> registerUser(@RequestBody UserDTO userDTO){
		iUserService.registerUser(userDTO);
		return ResponseEntity
				.status(HttpStatus.CREATED)
				.body(new ResponseDTO(Constants.STATUS_201 , Constants.MESSAGE_201));
	}
	
	public ResponseEntity<ResponseDTO> registerAdmin(@RequestBody UserDTO userDTO){
		iUserService.registerAdmin(userDTO);
		return ResponseEntity
				.status(HttpStatus.CREATED)
				.body(new ResponseDTO(Constants.STATUS_201, Constants.MESSAGE_201));
	}
	
	public ResponseEntity<List<UserDTO>> showAllUser(){
		List<UserDTO> users = iUserService.showAllUser();
		return ResponseEntity
				.status(HttpStatus.ACCEPTED)
				.body(users);
		
	}
	
	public ResponseEntity<String> login(@RequestBody UserDTO userDTO){
		
		try {
			Authentication authentication = authenticationManager.authenticate(
					new UsernamePasswordAuthenticationToken(userDTO.getEmail(), userDTO.getPassword())
					);
			if(authentication.isAuthenticated()) {
				UserDetails userDetails = myUserDetailsService.loadUserByUsername(userDTO.getUserName());
				return  ResponseEntity.status(HttpStatus.ACCEPTED).body(null);
			   } else {
		            // Shouldn't really reach here if authentication throws on failure
		            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
		        }
		    } catch (BadCredentialsException e) {
		        // Incorrect email/password
		        return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body("Invalid credentials");
		    } catch (Exception e) {
		        // Log the exception optionally
		        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
		                             .body("An internal error occurred");
		    }
		
	}
}

